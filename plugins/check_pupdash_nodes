#!/usr/bin/perl

# Copyright (c) 2012 Jason Hancock <jsnbyh@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# This file is part of the nagios-puppet bundle that can be found
# at https://github.com/jasonhancock/nagios-puppet

use strict;
use warnings;
use LWP;
use Nagios::Plugin;

my $np = Nagios::Plugin->new(
    usage     => "Usage: %s [-H|--host=<host> ] [ -p|--port=<port> ] [-U|--httpuser=<user>] [-P|--httppass=<pass>] [-V|--version=<version>] [-h|--help=<usage>] [-w|--warning=<thresholds>] [-c|--critical=<thresholds>]
    
    Information about arguments for '--warning' and '--critical' can be found in this file at 'my %interests'",
    shortname => 'Dashboard Hosts',
);

$np->add_arg(
    spec     => 'host|H=s',
    help     => '-H, --host=Hostname or IP address',
    required => 1,
);

$np->add_arg(
    spec    => 'port|p=s',
    help    => '-p, --port=port',
    default => 80,
);

$np->add_arg(
    spec    => 'httpuser|U=s',
    help    => '-U, --user=user',
);

$np->add_arg(
    spec    => 'httppass|P=s',
    help    => '-P, --pass=pass',
);

$np->add_arg(
    spec    => 'realm|r=s',
    help    => '-r, --realm=realm',
    default => 'Puppet Dashboard'
);

$np->add_arg(
    spec    => 'ssl|s',
    help    => '-s, --ssl   Use SSL (For when puppet dashboard is behind https)',
);

$np->add_arg(
    spec     => 'warning|w=s',
    help     => '-w, --warning=INTEGER',
    required => 1
);

$np->add_arg(
    spec     => 'critical|c=s',
    help     => '-c, --critical=INTEGER',
    required => 1
);

$np->getopts;

my @interests = (
    'unresponsive',
    'failed',
    'pending',
    'changed',
    'unchanged',
    'unreported'
);

# Split inputs for --warning and --critical into arrays
my @warning = split (',', $np->opts->warning);
my @critical = split (',', $np->opts->critical);

# Check if all options that require numbers only have numbers as arguments
foreach (@warning, @critical, $np->opts->port){
    if ($_ =~ /^-?\d+$/){
    }
    else {
        print "Invalid arguments. Please check your input.\n";
        exit;
    }
};

# Define error message to prevent redundancy
my $errorcommand1 = "Arguments missing for option '";
my $errorcommand2 = "'. Please check your input.\n";

# Check number of input thresholds
if (@warning != @interests) {
    my $errortype = "-w, --warning";
    print $errorcommand1, $errortype, $errorcommand2;
    exit;
};

if (@critical != @interests) {
    my $errortype = "-c, --critical";
    print $errorcommand1, $errortype, $errorcommand2;
    exit;
};

# Make sure that values of "warning" are smaller than values of "critical"
for (my $i = 0; $i < @warning; $i++) {
    if ($warning[$i] >= $critical[$i]) {
        print "At least one threshold of 'warning' is equal to or bigger than a threshold of 'critical'. Please check your input.\n";
        exit;
    };
};

# Assign input arguments for "warning" and "critical" to the associated key of '%interests' to be able to compare values one by one
my %thresholds_warning = ();
my %thresholds_critical = ();

for (my $j = 0; $j < @warning; $j++) {
    $thresholds_warning{$interests[$j]} = $warning[$j];
    $thresholds_critical{$interests[$j]} = $critical[$j];
};

our $domain = sprintf('%s:%d',
    $np->opts->host,
    $np->opts->port
),

my $url = sprintf('http%s://%s/', 
    defined($np->opts->ssl) ? 's' : '',
    $domain,
);

my $ua = new LWP::UserAgent;
if (defined($np->opts->httpuser)) {
  $ua->credentials(
    $domain,
    $np->opts->realm,
    $np->opts->httpuser,
    $np->opts->httppass
  );
}
my $response = $ua->get($url);

if (!$response->is_success) {
    # We failed
    $np->nagios_exit('UNKNOWN', $response->code . ": " . $response->status_line);
}

# Parse the markup, loading up anything that matches into the %nodes hash
my %nodes;
foreach my $line(split('\n', $response->decoded_content)) {
    if($line=~m/<a href="\/nodes\/(\w+)">(\d+)<\/a>/) {
        $nodes{$1} = $2;
    }
}


# Gather perfomance data
foreach my $interest(@interests) {
	$np->add_perfdata(
        label => $interest,
        value => defined($nodes{$interest}) ? $nodes{$interest} : 0,
        uom   => undef,
		
    );
}


# Gather values for status details

my $details = '';

foreach (@interests) {
    if ($nodes{$_} >= $thresholds_warning{$_}){           
		$details = $details . $_ . " = " . $nodes{$_} . "; ";
	}
}

# Compare each threshold per interest to determine the status

my $status = 'OK';

foreach (@interests) {
    if ($status ne 'CRITICAL'){
        if ($status ne 'WARNING'){
            if ($nodes{$_} >= $thresholds_warning{$_}){
                $status = 'WARNING';
            }
        }
        if ($nodes{$_} >= $thresholds_critical{$_}){
            $status = 'CRITICAL';
        }   	
	} else {
		last;
	}
}

$np->nagios_exit($status,$details);

